{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, HostBinding, Output, NgModule, forwardRef, Directive, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\n\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n\n  const script = document.createElement(\"script\");\n  script.innerHTML = \"\";\n  const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n  script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n\n  if (nonce) {\n    script.nonce = nonce;\n  }\n\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\nconst loader = {\n  loadScript\n};\n\nclass RecaptchaLoaderService {\n  constructor( // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, language, baseUrl, nonce, v3SiteKey) {\n    this.platformId = platformId;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.init();\n    this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of();\n  }\n  /** @internal */\n\n\n  init() {\n    if (RecaptchaLoaderService.ready) {\n      return;\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      const subject = new BehaviorSubject(null);\n      RecaptchaLoaderService.ready = subject;\n      const langParam = this.language ? \"&hl=\" + this.language : \"\";\n      const renderMode = this.v3SiteKey || \"explicit\";\n      loader.loadScript(renderMode, grecaptcha => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n    }\n  }\n\n}\n/**\n * @internal\n * @nocollapse\n */\n\n\nRecaptchaLoaderService.ready = null;\n\nRecaptchaLoaderService.ɵfac = function RecaptchaLoaderService_Factory(t) {\n  return new (t || RecaptchaLoaderService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), i0.ɵɵinject(RECAPTCHA_BASE_URL, 8), i0.ɵɵinject(RECAPTCHA_NONCE, 8), i0.ɵɵinject(RECAPTCHA_V3_SITE_KEY, 8));\n};\n\nRecaptchaLoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RecaptchaLoaderService,\n  factory: RecaptchaLoaderService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaLoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_LANGUAGE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_BASE_URL]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_NONCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_V3_SITE_KEY]\n      }]\n    }];\n  }, null);\n})();\n\nlet nextId = 0;\n\nclass RecaptchaComponent {\n  constructor(elementRef, loader, zone, settings) {\n    this.elementRef = elementRef;\n    this.loader = loader;\n    this.zone = zone;\n    this.id = `ngrecaptcha-${nextId++}`;\n    this.errorMode = \"default\";\n    this.resolved = new EventEmitter();\n    /**\n     * @deprecated `(error) output will be removed in the next major version. Use (errored) instead\n     */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n\n    this.error = new EventEmitter();\n    this.errored = new EventEmitter();\n\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.subscription = this.loader.ready.subscribe(grecaptcha => {\n      if (grecaptcha != null && grecaptcha.render instanceof Function) {\n        this.grecaptcha = grecaptcha;\n        this.renderRecaptcha();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n\n\n  execute() {\n    if (this.size !== \"invisible\") {\n      return;\n    }\n\n    if (this.widget != null) {\n      this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n\n  reset() {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n\n      this.grecaptchaReset();\n    }\n  }\n  /**\n   * ⚠️ Warning! Use this property at your own risk!\n   *\n   * While this member is `public`, it is not a part of the component's public API.\n   * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n   * You are **strongly advised** against using this property.\n   * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n   */\n\n\n  get __unsafe_widgetValue() {\n    return this.widget != null ? this.grecaptcha.getResponse(this.widget) : null;\n  }\n  /** @internal */\n\n\n  expired() {\n    this.resolved.emit(null);\n  }\n  /** @internal */\n\n\n  onError(args) {\n    this.error.emit(args);\n    this.errored.emit(args);\n  }\n  /** @internal */\n\n\n  captchaResponseCallback(response) {\n    this.resolved.emit(response);\n  }\n  /** @internal */\n\n\n  grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n  /** @internal */\n\n\n  renderRecaptcha() {\n    // This `any` can be removed after @types/grecaptcha get updated\n    const renderOptions = {\n      badge: this.badge,\n      callback: response => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      \"expired-callback\": () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type\n    };\n\n    if (this.errorMode === \"handled\") {\n      renderOptions[\"error-callback\"] = (...args) => {\n        this.zone.run(() => this.onError(args));\n      };\n    }\n\n    this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n\n}\n\nRecaptchaComponent.ɵfac = function RecaptchaComponent_Factory(t) {\n  return new (t || RecaptchaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(RecaptchaLoaderService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(RECAPTCHA_SETTINGS, 8));\n};\n\nRecaptchaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RecaptchaComponent,\n  selectors: [[\"re-captcha\"]],\n  hostVars: 1,\n  hostBindings: function RecaptchaComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    siteKey: \"siteKey\",\n    theme: \"theme\",\n    type: \"type\",\n    size: \"size\",\n    tabIndex: \"tabIndex\",\n    badge: \"badge\",\n    errorMode: \"errorMode\"\n  },\n  outputs: {\n    resolved: \"resolved\",\n    error: \"error\",\n    errored: \"errored\"\n  },\n  exportAs: [\"reCaptcha\"],\n  decls: 0,\n  vars: 0,\n  template: function RecaptchaComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaComponent, [{\n    type: Component,\n    args: [{\n      exportAs: \"reCaptcha\",\n      selector: \"re-captcha\",\n      template: ``\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: RecaptchaLoaderService\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_SETTINGS]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: [\"attr.id\"]\n    }],\n    siteKey: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    errorMode: [{\n      type: Input\n    }],\n    resolved: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    errored: [{\n      type: Output\n    }]\n  });\n})();\n\nclass RecaptchaCommonModule {}\n\nRecaptchaCommonModule.ɵfac = function RecaptchaCommonModule_Factory(t) {\n  return new (t || RecaptchaCommonModule)();\n};\n\nRecaptchaCommonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RecaptchaCommonModule\n});\nRecaptchaCommonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaCommonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaComponent],\n      exports: [RecaptchaComponent]\n    }]\n  }], null, null);\n})();\n\nclass RecaptchaModule {}\n\nRecaptchaModule.ɵfac = function RecaptchaModule_Factory(t) {\n  return new (t || RecaptchaModule)();\n};\n\nRecaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RecaptchaModule\n});\nRecaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [RecaptchaLoaderService],\n  imports: [RecaptchaCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RecaptchaComponent],\n      imports: [RecaptchaCommonModule],\n      providers: [RecaptchaLoaderService]\n    }]\n  }], null, null);\n})();\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\n\n\nclass ReCaptchaV3Service {\n  constructor(zone, siteKey, // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, baseUrl, nonce, language) {\n    /** @internal */\n    this.onLoadComplete = grecaptcha => {\n      this.grecaptcha = grecaptcha;\n\n      if (this.actionBacklog && this.actionBacklog.length > 0) {\n        this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n        this.actionBacklog = undefined;\n      }\n    };\n\n    this.zone = zone;\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.siteKey = siteKey;\n    this.nonce = nonce;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.init();\n  }\n\n  get onExecute() {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n\n    return this.onExecuteObservable;\n  }\n\n  get onExecuteError() {\n    if (!this.onExecuteErrorSubject) {\n      this.onExecuteErrorSubject = new Subject();\n      this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n    }\n\n    return this.onExecuteErrorObservable;\n  }\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n\n\n  execute(action) {\n    const subject = new Subject();\n\n    if (this.isBrowser) {\n      if (!this.grecaptcha) {\n        if (!this.actionBacklog) {\n          this.actionBacklog = [];\n        }\n\n        this.actionBacklog.push([action, subject]);\n      } else {\n        this.executeActionWithSubject(action, subject);\n      }\n    }\n\n    return subject.asObservable();\n  }\n  /** @internal */\n\n\n  executeActionWithSubject(action, subject) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onError = error => {\n      this.zone.run(() => {\n        subject.error(error);\n\n        if (this.onExecuteErrorSubject) {\n          // We don't know any better at this point, unfortunately, so have to resort to `any`\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          this.onExecuteErrorSubject.next({\n            action,\n            error\n          });\n        }\n      });\n    };\n\n    this.zone.runOutsideAngular(() => {\n      try {\n        this.grecaptcha.execute(this.siteKey, {\n          action\n        }).then(token => {\n          this.zone.run(() => {\n            subject.next(token);\n            subject.complete();\n\n            if (this.onExecuteSubject) {\n              this.onExecuteSubject.next({\n                action,\n                token\n              });\n            }\n          });\n        }, onError);\n      } catch (e) {\n        onError(e);\n      }\n    });\n  }\n  /** @internal */\n\n\n  init() {\n    if (this.isBrowser) {\n      if (\"grecaptcha\" in window) {\n        this.grecaptcha = grecaptcha;\n      } else {\n        const langParam = this.language ? \"&hl=\" + this.language : \"\";\n        loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n      }\n    }\n  }\n\n}\n\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) {\n  return new (t || ReCaptchaV3Service)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(RECAPTCHA_V3_SITE_KEY), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(RECAPTCHA_BASE_URL, 8), i0.ɵɵinject(RECAPTCHA_NONCE, 8), i0.ɵɵinject(RECAPTCHA_LANGUAGE, 8));\n};\n\nReCaptchaV3Service.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ReCaptchaV3Service,\n  factory: ReCaptchaV3Service.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [RECAPTCHA_V3_SITE_KEY]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_BASE_URL]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_NONCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_LANGUAGE]\n      }]\n    }];\n  }, null);\n})();\n\nclass RecaptchaV3Module {}\n\nRecaptchaV3Module.ɵfac = function RecaptchaV3Module_Factory(t) {\n  return new (t || RecaptchaV3Module)();\n};\n\nRecaptchaV3Module.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RecaptchaV3Module\n});\nRecaptchaV3Module.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ReCaptchaV3Service]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaV3Module, [{\n    type: NgModule,\n    args: [{\n      providers: [ReCaptchaV3Service]\n    }]\n  }], null, null);\n})();\n\nclass RecaptchaValueAccessorDirective {\n  constructor(host) {\n    this.host = host;\n    this.requiresControllerReset = false;\n  }\n\n  writeValue(value) {\n    if (!value) {\n      this.host.reset();\n    } else {\n      // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n      // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n      // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n      // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n      // we'll be telling the controller to \"reset\" the value back to null.\n      if (this.host.__unsafe_widgetValue !== value && Boolean(this.host.__unsafe_widgetValue) === false) {\n        this.requiresControllerReset = true;\n      }\n    }\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n\n    if (this.requiresControllerReset) {\n      this.requiresControllerReset = false;\n      this.onChange(null);\n    }\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  onResolve($event) {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n}\n\nRecaptchaValueAccessorDirective.ɵfac = function RecaptchaValueAccessorDirective_Factory(t) {\n  return new (t || RecaptchaValueAccessorDirective)(i0.ɵɵdirectiveInject(RecaptchaComponent));\n};\n\nRecaptchaValueAccessorDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: RecaptchaValueAccessorDirective,\n  selectors: [[\"re-captcha\", \"formControlName\", \"\"], [\"re-captcha\", \"formControl\", \"\"], [\"re-captcha\", \"ngModel\", \"\"]],\n  hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resolved\", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) {\n        return ctx.onResolve($event);\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaValueAccessorDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n      }],\n      selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\"\n    }]\n  }], function () {\n    return [{\n      type: RecaptchaComponent\n    }];\n  }, {\n    onResolve: [{\n      type: HostListener,\n      args: [\"resolved\", [\"$event\"]]\n    }]\n  });\n})();\n\nclass RecaptchaFormsModule {}\n\nRecaptchaFormsModule.ɵfac = function RecaptchaFormsModule_Factory(t) {\n  return new (t || RecaptchaFormsModule)();\n};\n\nRecaptchaFormsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RecaptchaFormsModule\n});\nRecaptchaFormsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [FormsModule, RecaptchaCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaFormsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaValueAccessorDirective],\n      exports: [RecaptchaValueAccessorDirective],\n      imports: [FormsModule, RecaptchaCommonModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective }; //# sourceMappingURL=ng-recaptcha.mjs.map","map":{"version":3,"names":["i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","EventEmitter","Component","Input","HostBinding","Output","NgModule","forwardRef","Directive","HostListener","isPlatformBrowser","of","BehaviorSubject","Subject","NG_VALUE_ACCESSOR","FormsModule","RECAPTCHA_LANGUAGE","RECAPTCHA_BASE_URL","RECAPTCHA_NONCE","RECAPTCHA_SETTINGS","RECAPTCHA_V3_SITE_KEY","loadScript","renderMode","onLoaded","urlParams","url","nonce","window","ng2recaptchaloaded","grecaptcha","script","document","createElement","innerHTML","baseUrl","src","async","defer","head","appendChild","loader","RecaptchaLoaderService","constructor","platformId","language","v3SiteKey","init","ready","asObservable","subject","langParam","next","ɵfac","ɵprov","type","Object","decorators","args","undefined","nextId","RecaptchaComponent","elementRef","zone","settings","id","errorMode","resolved","error","errored","siteKey","theme","size","badge","ngAfterViewInit","subscription","subscribe","render","Function","renderRecaptcha","ngOnDestroy","grecaptchaReset","unsubscribe","execute","widget","executeRequested","reset","getResponse","emit","__unsafe_widgetValue","expired","onError","captchaResponseCallback","response","runOutsideAngular","renderOptions","callback","run","sitekey","tabindex","tabIndex","nativeElement","ElementRef","NgZone","ɵcmp","exportAs","selector","template","RecaptchaCommonModule","ɵmod","ɵinj","declarations","exports","RecaptchaModule","imports","providers","ReCaptchaV3Service","onLoadComplete","actionBacklog","length","forEach","action","executeActionWithSubject","isBrowser","onExecute","onExecuteSubject","onExecuteObservable","onExecuteError","onExecuteErrorSubject","onExecuteErrorObservable","push","then","token","complete","e","RecaptchaV3Module","RecaptchaValueAccessorDirective","host","requiresControllerReset","writeValue","value","Boolean","registerOnChange","fn","onChange","registerOnTouched","onTouched","onResolve","$event","ɵdir","multi","provide","useExisting","RecaptchaFormsModule"],"sources":["/home/am-pc-35/prathameshvibhute/Angular_Projects/Login-Task/node_modules/ng-recaptcha/fesm2020/ng-recaptcha.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, HostBinding, Output, NgModule, forwardRef, Directive, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\n\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement(\"script\");\n    script.innerHTML = \"\";\n    const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nconst loader = { loadScript };\n\nclass RecaptchaLoaderService {\n    constructor(\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, language, baseUrl, nonce, v3SiteKey) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.v3SiteKey = v3SiteKey;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService.ready = subject;\n            const langParam = this.language ? \"&hl=\" + this.language : \"\";\n            const renderMode = this.v3SiteKey || \"explicit\";\n            loader.loadScript(renderMode, (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n}\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaLoaderService, deps: [{ token: PLATFORM_ID }, { token: RECAPTCHA_LANGUAGE, optional: true }, { token: RECAPTCHA_BASE_URL, optional: true }, { token: RECAPTCHA_NONCE, optional: true }, { token: RECAPTCHA_V3_SITE_KEY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nRecaptchaLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaLoaderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaLoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_LANGUAGE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_BASE_URL]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_NONCE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_V3_SITE_KEY]\n                }] }]; } });\n\nlet nextId = 0;\nclass RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.errorMode = \"default\";\n        this.resolved = new EventEmitter();\n        /**\n         * @deprecated `(error) output will be removed in the next major version. Use (errored) instead\n         */\n        // eslint-disable-next-line @angular-eslint/no-output-native\n        this.error = new EventEmitter();\n        this.errored = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== \"invisible\") {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /**\n     * ⚠️ Warning! Use this property at your own risk!\n     *\n     * While this member is `public`, it is not a part of the component's public API.\n     * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n     * You are **strongly advised** against using this property.\n     * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n     */\n    get __unsafe_widgetValue() {\n        return this.widget != null ? this.grecaptcha.getResponse(this.widget) : null;\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    onError(args) {\n        this.error.emit(args);\n        this.errored.emit(args);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        // This `any` can be removed after @types/grecaptcha get updated\n        const renderOptions = {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            \"expired-callback\": () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        };\n        if (this.errorMode === \"handled\") {\n            renderOptions[\"error-callback\"] = (...args) => {\n                this.zone.run(() => this.onError(args));\n            };\n        }\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n}\nRecaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaComponent, deps: [{ token: i0.ElementRef }, { token: RecaptchaLoaderService }, { token: i0.NgZone }, { token: RECAPTCHA_SETTINGS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nRecaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: RecaptchaComponent, selector: \"re-captcha\", inputs: { id: \"id\", siteKey: \"siteKey\", theme: \"theme\", type: \"type\", size: \"size\", tabIndex: \"tabIndex\", badge: \"badge\", errorMode: \"errorMode\" }, outputs: { resolved: \"resolved\", error: \"error\", errored: \"errored\" }, host: { properties: { \"attr.id\": \"this.id\" } }, exportAs: [\"reCaptcha\"], ngImport: i0, template: ``, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    exportAs: \"reCaptcha\",\n                    selector: \"re-captcha\",\n                    template: ``,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: RecaptchaLoaderService }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_SETTINGS]\n                }] }]; }, propDecorators: { id: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: [\"attr.id\"]\n            }], siteKey: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], badge: [{\n                type: Input\n            }], errorMode: [{\n                type: Input\n            }], resolved: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], errored: [{\n                type: Output\n            }] } });\n\nclass RecaptchaCommonModule {\n}\nRecaptchaCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaCommonModule, declarations: [RecaptchaComponent], exports: [RecaptchaComponent] });\nRecaptchaCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaCommonModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RecaptchaComponent],\n                    exports: [RecaptchaComponent],\n                }]\n        }] });\n\nclass RecaptchaModule {\n}\nRecaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaModule, imports: [RecaptchaCommonModule], exports: [RecaptchaComponent] });\nRecaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaModule, providers: [RecaptchaLoaderService], imports: [RecaptchaCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [RecaptchaComponent],\n                    imports: [RecaptchaCommonModule],\n                    providers: [RecaptchaLoaderService],\n                }]\n        }] });\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nclass ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, baseUrl, nonce, language) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    get onExecuteError() {\n        if (!this.onExecuteErrorSubject) {\n            this.onExecuteErrorSubject = new Subject();\n            this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n        }\n        return this.onExecuteErrorObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const onError = (error) => {\n            this.zone.run(() => {\n                subject.error(error);\n                if (this.onExecuteErrorSubject) {\n                    // We don't know any better at this point, unfortunately, so have to resort to `any`\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    this.onExecuteErrorSubject.next({ action, error });\n                }\n            });\n        };\n        this.zone.runOutsideAngular(() => {\n            try {\n                this.grecaptcha.execute(this.siteKey, { action }).then((token) => {\n                    this.zone.run(() => {\n                        subject.next(token);\n                        subject.complete();\n                        if (this.onExecuteSubject) {\n                            this.onExecuteSubject.next({ action, token });\n                        }\n                    });\n                }, onError);\n            }\n            catch (e) {\n                onError(e);\n            }\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if (\"grecaptcha\" in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                const langParam = this.language ? \"&hl=\" + this.language : \"\";\n                loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n            }\n        }\n    }\n}\nReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ReCaptchaV3Service, deps: [{ token: i0.NgZone }, { token: RECAPTCHA_V3_SITE_KEY }, { token: PLATFORM_ID }, { token: RECAPTCHA_BASE_URL, optional: true }, { token: RECAPTCHA_NONCE, optional: true }, { token: RECAPTCHA_LANGUAGE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ReCaptchaV3Service });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ReCaptchaV3Service, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [RECAPTCHA_V3_SITE_KEY]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_BASE_URL]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_NONCE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RECAPTCHA_LANGUAGE]\n                }] }]; } });\n\nclass RecaptchaV3Module {\n}\nRecaptchaV3Module.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaV3Module, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaV3Module.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaV3Module });\nRecaptchaV3Module.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaV3Module, providers: [ReCaptchaV3Service] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaV3Module, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [ReCaptchaV3Service],\n                }]\n        }] });\n\nclass RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n        this.requiresControllerReset = false;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n        else {\n            // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n            // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n            // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n            // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n            // we'll be telling the controller to \"reset\" the value back to null.\n            if (this.host.__unsafe_widgetValue !== value && Boolean(this.host.__unsafe_widgetValue) === false) {\n                this.requiresControllerReset = true;\n            }\n        }\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n        if (this.requiresControllerReset) {\n            this.requiresControllerReset = false;\n            this.onChange(null);\n        }\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n}\nRecaptchaValueAccessorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaValueAccessorDirective, deps: [{ token: RecaptchaComponent }], target: i0.ɵɵFactoryTarget.Directive });\nRecaptchaValueAccessorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: RecaptchaValueAccessorDirective, selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\", host: { listeners: { \"resolved\": \"onResolve($event)\" } }, providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n        },\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaValueAccessorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    providers: [\n                        {\n                            multi: true,\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n                        },\n                    ],\n                    selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\",\n                }]\n        }], ctorParameters: function () { return [{ type: RecaptchaComponent }]; }, propDecorators: { onResolve: [{\n                type: HostListener,\n                args: [\"resolved\", [\"$event\"]]\n            }] } });\n\nclass RecaptchaFormsModule {\n}\nRecaptchaFormsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaFormsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaFormsModule, declarations: [RecaptchaValueAccessorDirective], imports: [FormsModule, RecaptchaCommonModule], exports: [RecaptchaValueAccessorDirective] });\nRecaptchaFormsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaFormsModule, imports: [FormsModule, RecaptchaCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RecaptchaFormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RecaptchaValueAccessorDirective],\n                    exports: [RecaptchaValueAccessorDirective],\n                    imports: [FormsModule, RecaptchaCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective };\n//# sourceMappingURL=ng-recaptcha.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}